/// <reference types="lodash" />
import { Instance } from 'mobx-state-tree';
import type { IFormItemStore } from './formItem';
import { Api, DataChangeReason, fetchOptions, Payload } from '../types';
export declare const FormStore: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    storeType: import("mobx-state-tree").ISimpleType<string>;
    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
} & {
    hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    pristineRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    upStreamData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
} & {
    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
    error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
} & {
    inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    savedData: import("mobx-state-tree").IType<any, any, any>;
    canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    persistData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<string | boolean, string | boolean, string | boolean>, [undefined]>;
    restError: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
}, {
    readonly parentStore: any;
    readonly __: any;
    readonly hasChildren: boolean;
    readonly children: any[];
} & {
    onChildStoreDispose(child: any): void;
    syncProps(props: any, prevProps: any, list?: string[]): void;
    dispose: (callback?: (() => void) | undefined) => void;
    addChildId: (id: string) => void;
    removeChildId: (id: string) => void;
} & {
    getValueByName(name: string, canAccessSuper?: boolean): any;
    getPristineValueByName(name: string): any;
    readonly pristineDiff: any;
} & {
    setTopStore(value: any): void;
    initData(data?: object, skipSetPristine?: boolean, changeReason?: DataChangeReason | undefined): void;
    reset(): void;
    updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined, concatFields?: string | string[] | undefined, changeReason?: DataChangeReason | undefined): void;
    changeValue(name: string, value: any, changePristine?: boolean | undefined, force?: boolean | undefined, otherModifier?: ((data: Object) => void) | undefined, changeReason?: DataChangeReason | undefined): void;
    setCurrentAction(action: any, resolveDefinitions?: ((schema: any) => any) | undefined): void;
    openDialog(ctx: any, additonal?: object | undefined, callback?: ((confirmed: boolean, values: any) => void) | undefined, scoped?: import("amis").IScopedContext | undefined): void;
    closeDialog(confirmed?: any, data?: any): void;
    openDrawer(ctx: any, additonal?: object | undefined, callback?: ((confirmed: boolean, ret: any) => void) | undefined, scoped?: import("amis").IScopedContext | undefined): void;
    closeDrawer(confirmed?: any, data?: any): void;
    getDialogScoped(): import("amis").IScopedContext | null;
    getDrawerScoped(): import("amis").IScopedContext | null;
} & {
    readonly loading: boolean;
} & {
    markFetching: (fetching?: boolean) => void;
    markSaving: (saving?: boolean) => void;
    markBusying: (busying?: boolean) => void;
    fetchInitData: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    fetchData: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    reInitData: (data: object | undefined, replace?: boolean, concatFields?: string | string[] | undefined) => void;
    updateMessage: (msg?: string | undefined, error?: boolean) => void;
    clearMessage: () => void;
    setHasRemoteData: () => void;
    saveRemote: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    fetchSchema: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    checkRemote: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
} & {
    readonly loading: boolean;
    readonly items: ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        isControlled: boolean;
        type: string;
        label: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        isValueSchemaExp: boolean;
        tmpValue: any;
        emitedValue: any;
        changeMotivation: string;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        extraName: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        inited: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        validateApi: any;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
        validateOnChange: boolean;
        inputGroupControl: any;
        colIndex: any;
        rowIndex: any;
        pagination: any;
        accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        popOverOpen: boolean;
        popOverData: any;
        popOverSchema: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        emitedValue: import("mobx-state-tree").IType<any, any, any>;
        changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        colIndex: import("mobx-state-tree").IType<any, any, any>;
        rowIndex: import("mobx-state-tree").IType<any, any, any>;
        pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        popOverData: import("mobx-state-tree").IType<any, any, any>;
        popOverSchema: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    /** 获取InputGroup的子元素 */
    readonly inputGroupItems: Record<string, ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        isControlled: boolean;
        type: string;
        label: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        isValueSchemaExp: boolean;
        tmpValue: any;
        emitedValue: any;
        changeMotivation: string;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        extraName: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        inited: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        validateApi: any;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
        validateOnChange: boolean;
        inputGroupControl: any;
        colIndex: any;
        rowIndex: any;
        pagination: any;
        accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        popOverOpen: boolean;
        popOverData: any;
        popOverSchema: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        emitedValue: import("mobx-state-tree").IType<any, any, any>;
        changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        colIndex: import("mobx-state-tree").IType<any, any, any>;
        rowIndex: import("mobx-state-tree").IType<any, any, any>;
        pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        popOverData: import("mobx-state-tree").IType<any, any, any>;
        popOverSchema: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[]>;
    readonly errors: {
        [propName: string]: string[];
    };
    getValueByName(name: string, canAccessSuperData?: boolean): any;
    getPristineValueByName(name: string): any;
    getItemById(id: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        isControlled: boolean;
        type: string;
        label: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        isValueSchemaExp: boolean;
        tmpValue: any;
        emitedValue: any;
        changeMotivation: string;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        extraName: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        inited: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        validateApi: any;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
        validateOnChange: boolean;
        inputGroupControl: any;
        colIndex: any;
        rowIndex: any;
        pagination: any;
        accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        popOverOpen: boolean;
        popOverData: any;
        popOverSchema: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        emitedValue: import("mobx-state-tree").IType<any, any, any>;
        changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        colIndex: import("mobx-state-tree").IType<any, any, any>;
        rowIndex: import("mobx-state-tree").IType<any, any, any>;
        pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        popOverData: import("mobx-state-tree").IType<any, any, any>;
        popOverSchema: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    getItemByName(name: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        isControlled: boolean;
        type: string;
        label: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        isValueSchemaExp: boolean;
        tmpValue: any;
        emitedValue: any;
        changeMotivation: string;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        extraName: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        inited: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        validateApi: any;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
        validateOnChange: boolean;
        inputGroupControl: any;
        colIndex: any;
        rowIndex: any;
        pagination: any;
        accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        popOverOpen: boolean;
        popOverData: any;
        popOverSchema: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        emitedValue: import("mobx-state-tree").IType<any, any, any>;
        changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        colIndex: import("mobx-state-tree").IType<any, any, any>;
        rowIndex: import("mobx-state-tree").IType<any, any, any>;
        pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        popOverData: import("mobx-state-tree").IType<any, any, any>;
        popOverSchema: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    getItemsByName(name: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        isControlled: boolean;
        type: string;
        label: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        isValueSchemaExp: boolean;
        tmpValue: any;
        emitedValue: any;
        changeMotivation: string;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        extraName: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        inited: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        validateApi: any;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
        validateOnChange: boolean;
        inputGroupControl: any;
        colIndex: any;
        rowIndex: any;
        pagination: any;
        accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
        popOverOpen: boolean;
        popOverData: any;
        popOverSchema: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        emitedValue: import("mobx-state-tree").IType<any, any, any>;
        changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            rule: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        colIndex: import("mobx-state-tree").IType<any, any, any>;
        rowIndex: import("mobx-state-tree").IType<any, any, any>;
        pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
        popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        popOverData: import("mobx-state-tree").IType<any, any, any>;
        popOverSchema: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
        readonly hasChildren: boolean;
        readonly children: any[];
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly errClassNames: string;
        readonly lastSelectValue: string;
        readonly enableSourcePagination: boolean;
        readonly sourcePageNum: number;
        readonly sourcePerPageNum: number;
        readonly sourceTotalNum: number;
        getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
        splitExtraValue(value: any): any[];
        getMergedData(data: any): any;
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ name, extraName, required, unique, value, isValueSchemaExp, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label, inputGroupControl, pagination }: {
            name?: string | undefined;
            extraName?: string | undefined;
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            isValueSchemaExp?: boolean | undefined;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
            validateApi?: boolean | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            validateOnChange?: boolean | undefined;
            label?: string | undefined;
            inputGroupControl?: {
                [propsName: string]: any;
                name: string;
                path: string;
            } | undefined;
            pagination?: {
                enable?: boolean | undefined;
                page?: number | undefined;
                perPage?: number | undefined;
            } | undefined;
        }) => void;
        validate: (data: Object, hook?: any, customRules?: {
            [propName: string]: any;
        } | undefined) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | (string | {
            msg: string;
            rule: string;
        })[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setPagination: (params: {
            page?: number | undefined;
            perPage?: number | undefined;
            total?: number | undefined;
        }) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: (fetchOptions & {
            extendsOptions?: boolean | undefined;
        }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        loadOptionsFromDataScope: (source: string, ctx: Record<string, any>, onChange?: ((value: any) => void) | undefined) => any[];
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        deferLoadLeftOptions: (option: any, leftOptions: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        expandTreeOptions: (nodePathArr: any[], api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<void | Payload | null>;
        syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: (keepErrors?: boolean) => void;
        resetValidationStatus: (tag?: string | undefined) => void;
        openDialog: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closeDialog: (confirmed?: any, result?: any) => void;
        openPopOver: (schema: any, ctx: any, callback?: ((confirmed?: any, value?: any) => void) | undefined) => void;
        closePopOver: (confirmed?: any, result?: any) => void;
        changeTmpValue: (value: any, changeReason?: "input" | "defaultValue" | "initialValue" | "formInited" | "dataChanged" | "formulaChanged" | "controlled" | undefined) => void;
        changeEmitedValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            isControlled: boolean;
            type: string;
            label: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            isValueSchemaExp: boolean;
            tmpValue: any;
            emitedValue: any;
            changeMotivation: string;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            extraName: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            inited: boolean;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            optionsRaw: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            validateApi: any;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
            validateOnChange: boolean;
            inputGroupControl: any;
            colIndex: any;
            rowIndex: any;
            pagination: any;
            accumulatedOptions: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
            popOverOpen: boolean;
            popOverData: any;
            popOverSchema: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isControlled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            isValueSchemaExp: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            emitedValue: import("mobx-state-tree").IType<any, any, any>;
            changeMotivation: import("mobx-state-tree").IType<string | undefined, string, string>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                rule: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            extraName: import("mobx-state-tree").IType<string | undefined, string, string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            optionsRaw: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            inputGroupControl: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            colIndex: import("mobx-state-tree").IType<any, any, any>;
            rowIndex: import("mobx-state-tree").IType<any, any, any>;
            pagination: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            accumulatedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
            popOverOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            popOverData: import("mobx-state-tree").IType<any, any, any>;
            popOverSchema: import("mobx-state-tree").IType<any, any, any>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly errClassNames: string;
            readonly lastSelectValue: string;
            readonly enableSourcePagination: boolean;
            readonly sourcePageNum: number;
            readonly sourcePerPageNum: number;
            readonly sourceTotalNum: number;
            getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any;
            splitExtraValue(value: any): any[];
            getMergedData(data: any): any;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        loadAutoUpdateData: (api: Api, data?: object | undefined, silent?: boolean | undefined) => Promise<Payload>;
        setIsControlled: (value: any) => void;
        init: () => Promise<void>;
        addInitHook(fn: (store: any) => any, weight?: number): () => void;
        beforeDestroy: () => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly valid: boolean;
    readonly validating: boolean;
    readonly isPristine: boolean;
    readonly modified: boolean;
    readonly persistKey: string;
} & {
    setInited: (value: boolean) => void;
    setValues: (values: object, tag?: object, replace?: boolean, concatFields?: string | string[], changeReason?: DataChangeReason) => void;
    setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean, changeReason?: DataChangeReason) => void;
    trimValues: () => void;
    submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: Array<() => Promise<any>>, failedMessage?: string, validateErrCb?: () => void, throwErrors?: boolean) => Promise<any>;
    validate: (hooks?: Array<() => Promise<any>>, forceValidate?: boolean, throwErrors?: boolean, failedMessage?: string, validateErrCb?: () => void) => Promise<boolean>;
    validateFields: (fields: (string | {
        name: string;
        rules: {
            [propName: string]: any;
        };
    })[]) => Promise<boolean>;
    clearErrors: () => void;
    saveRemote: (api: Api, data?: object, options?: fetchOptions) => Promise<any>;
    reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
    syncOptions: import("lodash").DebouncedFunc<() => void>;
    setCanAccessSuperData: (value?: boolean) => void;
    deleteValueByName: (name: string, changeReason?: DataChangeReason) => void;
    getLocalPersistData: () => void;
    setLocalPersistData: (keys?: string[]) => void;
    clearLocalPersistData: () => void;
    setPristine: (data: object) => void;
    setPersistData: (value?: string) => void;
    clear: (cb?: ((data: any) => void) | undefined) => void;
    updateSavedData: () => void;
    setFormItemErrors: (errors: {
        [propName: string]: string;
    }, tag?: string) => void;
    getItemsByPath: (key: string) => any[] | null;
    setRestError: (errors: string[]) => void;
    addRestError: (msg: string, name?: string | Array<string>) => void;
    clearRestError: () => void;
    beforeDestroy(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type IFormStore = Instance<typeof FormStore>;
export { IFormItemStore };
